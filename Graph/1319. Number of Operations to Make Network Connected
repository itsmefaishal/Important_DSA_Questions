class Solution {
    public int makeConnected(int n, int[][] connections) {
        int m = connections.length;
        if(m < n-1) return -1;

        List<List<Integer>> adj = new ArrayList<>();
        boolean[] vis = new boolean[n];

        for(int i=0; i<n; i++){
            adj.add(new ArrayList<>());
        }


        for(int i=0; i<m; i++){
            int u = connections[i][0];
            int v = connections[i][1];

            adj.get(u).add(v);
            adj.get(v).add(u);
        }

        int minOperations = 0;

        for(int i=0; i<n; i++){
            if(!vis[i]){
                dfs(i,adj,vis);
                minOperations++;
            }
        }

        return minOperations-1;
    }
    private void dfs(int v, List<List<Integer>> adj, boolean[] vis){
        if(vis[v]) return;

        vis[v] = true;

        for(int node : adj.get(v)){
            if(!vis[node]){
                dfs(node,adj,vis);
            }
        }
    }
}
