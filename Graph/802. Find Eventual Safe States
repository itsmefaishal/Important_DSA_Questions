class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        List<Integer> list = new ArrayList<>();
        int n = graph.length;
        boolean[] vis = new boolean[n];
        Set<Integer> set = new HashSet<>();

        for(int i=0; i<n; i++){
            if(!vis[i]){
                isCycle(i, graph, vis, set);
            }
        }

        // before this every node which was the part of any cycle has been added to the set and every other which remains is a safe node

        for(int i=0; i<n; i++){
            if(!set.contains(i)) list.add(i);
        }

        return list;
    }
// Here we are simply traversing and finding a cycle and in the meantime adding all the nodes in the set which is the part of the cycle
    private boolean isCycle(int v, int[][] adj, boolean[] vis, Set<Integer> path){
        vis[v] = true;
        path.add(v);

        for(int i : adj[v]){
            if(path.contains(i) && vis[i]) return true;
            else if(!vis[i]){
                if(isCycle(i, adj, vis, path)) return true;
            }
        }

        path.remove(v);
        return false;
    }
}
