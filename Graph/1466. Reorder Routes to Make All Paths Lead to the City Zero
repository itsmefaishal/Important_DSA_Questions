class Solution {
    private int countRoutes = 0;
    public int minReorder(int n, int[][] connections) {
        List<List<Integer>> forward = new ArrayList<>();
        List<List<Integer>> adj = new ArrayList<>();

        for(int i=0; i<n; i++){
            forward.add(new ArrayList<>());
            adj.add(new ArrayList<>());
        }

        for(int i=0; i<connections.length; i++){
            int u = connections[i][0];
            int v = connections[i][1];

            forward.get(u).add(v);
            adj.get(v).add(u);
            adj.get(u).add(v);
        }

        dfs(0,forward, adj, new boolean[n]);

        return countRoutes;
    }
    private void dfs(int s,List<List<Integer>> f, List<List<Integer>> adj, boolean[] vis){
        if(vis[s]) return;

        vis[s] = true;

        for(int nodes : adj.get(s)){
            if(!vis[nodes]){
                if(f.get(s).contains(nodes)){
                    countRoutes++;
                }
                dfs(nodes, f, adj, vis);
            }
        }
    }
}
