One of the best Questions for shortest path I found on Leetcode

class Solution {
    public int snakesAndLadders(int[][] board) {
        int n = board.length;
        List<List<Integer>> adj = new ArrayList<>();
        boolean flag = false;
        int count = 1;
        int[] connection = new int[n*n+1];
        Arrays.fill(connection, -1);

        for(int i=0; i<=n*n; i++){
            adj.add(new ArrayList<>());
        }

        for(int i=n-1; i>=0; i--){
            if(flag){
                for(int j=n-1; j>=0; j--){
                    if(board[i][j] != -1){
                        connection[count] = board[i][j];
                    }
                    count++;
                }
            }
            else{
                for(int j=0; j<n; j++){
                    if(board[i][j] != -1){
                        connection[count] = board[i][j];
                    }
                    count++;
                }
            }

            flag = !flag;
        }

        for(int i=1; i<n*n; i++){
            for(int j=1; j<=6; j++){
                int nbr = i + j;
                
                if(nbr <= n*n){
                    if(connection[nbr] != -1){
                        adj.get(i).add(connection[nbr]);
                    }
                    else{
                        adj.get(i).add(nbr);
                    }
                }
            }
        }

        boolean[] vis = new boolean[n*n+1];
        Queue<Integer> q = new LinkedList<>();
        q.add(1);
        int lvl = 0;
        vis[1] = true;

        while(!q.isEmpty()){
            int size = q.size();

            while(size-- > 0){
                int node = q.poll();

                if(node == n*n) return lvl;

                for(int v : adj.get(node)){
                    if(!vis[v]){
                        vis[v] = true;
                        q.add(v);
                    }
                }
            }

            lvl++;
        }

        return -1;
    }
}
